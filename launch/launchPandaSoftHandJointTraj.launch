<?xml version="1.0" ?>
<!-- THIS FILE LAUNCHES THE FRANKA EMIKA PANDA + SOFTHAND: BOTH THE PACKAGES ARE NEEDED -->
<launch>
    <!-- LAUNCH ARGUMENTS -->

    <!-- Robot to be used -->
  	<arg name="robot_name" default="panda_softhand"/>

    <!-- Panda params -->
    <arg name="panda_arm_enabled" default="true"/>
    <arg name="robot_ip" default="172.16.0.102"/>
    <arg name="load_gripper" default="false"/>

    <!-- Hand/Glove params -->
    <arg name="right_hand_enabled" default="true"/>
    <arg name="launch_qb_interface" default="true"/>
    <arg name="use_imu" default="false"/>

    <!-- Utilities -->
	<arg name="use_other_utils" default="true"/>
    <arg name="environment_name" default="panda_soma"/>
    <arg name="use_moveit" default="true"/>

    <!-- Set simulation tools (NOT YET WORKING) -->
	<arg name="use_gazebo" default="false"/>

    <!-- START LAUNCH -->

    <!-- Robot description -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find adaptive_grasp_controller)/robot/panda_softhand.urdf.xacro'" unless="$(arg load_gripper)" />

    <group if="$(arg use_gazebo)">
		<!-- Load Gazebo simulation environment -->
    	<include file="$(find gazebo_ros)/launch/empty_world.launch">
    	    <arg name="world_name" value="$(find adaptive_grasp_controller)/worlds/$(arg environment_name).world"/>
    	    <arg name="paused" value="false"/>
    	    <arg name="use_sim_time" value="true"/>
    	    <arg name="gui" value="true"/>
     	   <arg name="headless" value="true"/>
			<arg name="debug" value="false"/>
		</include>

		<!-- Spawn the full robot into Gazebo  -->
    	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model $(arg robot_name) -param robot_description"/>
    </group>

    <!-- Joint state and robot state publishers of the full robot description -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<!-- FOR USING JOINT STATE PUBLISER FOR GETTING FINGER JOINT STATES -->
		<rosparam param="source_list">[/joint_states_desired]</rosparam>
		<!-- FOR USING FINGER FK PACKAGE FOR GETTING FINGER JOINT STATES -->
		<!-- <rosparam param="source_list">[/panda_arm/joint_states,/all_hand_joint_states]</rosparam> -->
        <param name="rate" value="30"/>
	</node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
    
    <!-- Panda namespace -->
    <group ns="panda_arm">

        <!-- A copy of robot description -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find adaptive_grasp_controller)/robot/panda_softhand.urdf.xacro'" unless="$(arg load_gripper)" />

        <!-- Panda hardware interface -->
        <group if="$(arg panda_arm_enabled)">
            <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
                <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" />
                <param name="robot_ip" value="$(arg robot_ip)" />
            </node>
        </group>

        <!-- Panda controllers -->
        <group if="$(arg use_gazebo)">
            <!-- <rosparam command="load" file="$(find franka_gazebo)/config/sim_controllers.yaml" /> -->
            <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller"/>
            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="position_joint_trajectory_controller"/>
            <node name="controller_stopper" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="--stopped cartesian_impedance_controller_softbots_stiff_matrix"/>
            <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="/panda_arm/joint_states /joint_states_desired" />
        </group>
        <group unless="$(arg use_gazebo)">
            <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
            <rosparam command="load" file="$(find franka_softbots)/config/franka_softbots.yaml" />
            <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="position_joint_trajectory_controller"/>
            <node name="controller_stopper" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="--stopped cartesian_impedance_controller_softbots_stiff_matrix"/>

            
            <!-- Panda joint state publisher -->
            <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
                <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
                <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
                <param name="rate" value="30"/>
            </node>

            <!-- Panda desired state publisher -->
            <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
                <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
                <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired, /right_hand/joint_states] </rosparam>
                <param name="rate" value="30"/>
                <remap from="/panda_arm/joint_states" to="/joint_states_desired" />
            </node>
        </group>

    </group>

    <!-- Loading MoveIt interface -->
	<group if="$(arg use_moveit)">
		<include file="$(find panda_moveit_config)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true"/>
            <arg name="fake_execution" value="true"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
            <arg name="load_gripper" value="$(arg load_gripper)"/>
        </include>
	</group>

    <!-- Load collision objects into the planning scene -->
  	<node name="sdf_to_planning_scene" pkg="adaptive_grasp_controller" type="sdf_to_planning_scene_node" args="$(find adaptive_grasp_controller)/worlds/$(arg environment_name).world --skipIfco" output="screen"/>

    <rosparam command="load" file="$(find adaptive_grasp_controller)/configs/sh_kuka_controllers.yaml" />
    
    <!-- Hand namespace -->
    <group ns="right_hand">
        
        <group if="$(arg right_hand_enabled)">
            
            <!-- A copy of robot description -->
            <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find adaptive_grasp_controller)/robot/panda_softhand.urdf.xacro'" unless="$(arg load_gripper)" />

            <rosparam command="load" file="$(find adaptive_grasp_controller)/configs/right_hand_names.yaml" />

            <!-- load the hardware interface for hand in current namespace -->
            <include file="$(find soft_hand_qb_ros_control)/launch/soft_hand_qb_hw.launch"></include>

        </group>

        <!-- load the hand controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

    </group>

    <!-- QB Interface -->
    <group if="$(arg launch_qb_interface)">
        <group if="$(arg use_imu)">
            <include file="$(find qb_interface)/launch/qb_interface_imu.launch"></include>
        </group>
        <group unless="$(arg use_imu)">
            <include file="$(find qb_interface)/launch/qb_interface.launch"></include>
        </group>
    </group>

    <!-- RViz for visualization -->
    <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find adaptive_grasp_controller)/configs/panda_soma.rviz"/>

    <group if="$(arg use_other_utils)">
		<!-- Load finger_fk service node -->
  		<node name="finger_forward_kinematics" pkg="finger_fk" type="finger_fk_main.py" output="screen"/>
	</group>

</launch>
